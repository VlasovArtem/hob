// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/house/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	service "github.com/VlasovArtem/hob/src/house/service"

	uuid "github.com/google/uuid"
)

// HouseService is an autogenerated mock type for the HouseService type
type HouseService struct {
	mock.Mock
}

// Add provides a mock function with given fields: house
func (_m *HouseService) Add(house model.CreateHouseRequest) (model.HouseDto, error) {
	ret := _m.Called(house)

	var r0 model.HouseDto
	if rf, ok := ret.Get(0).(func(model.CreateHouseRequest) model.HouseDto); ok {
		r0 = rf(house)
	} else {
		r0 = ret.Get(0).(model.HouseDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateHouseRequest) error); ok {
		r1 = rf(house)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddBatch provides a mock function with given fields: house
func (_m *HouseService) AddBatch(house model.CreateHouseBatchRequest) ([]model.HouseDto, error) {
	ret := _m.Called(house)

	var r0 []model.HouseDto
	if rf, ok := ret.Get(0).(func(model.CreateHouseBatchRequest) []model.HouseDto); ok {
		r0 = rf(house)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HouseDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateHouseBatchRequest) error); ok {
		r1 = rf(house)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *HouseService) DeleteById(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsById provides a mock function with given fields: id
func (_m *HouseService) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *HouseService) FindById(id uuid.UUID) (model.HouseDto, error) {
	ret := _m.Called(id)

	var r0 model.HouseDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.HouseDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.HouseDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: userId
func (_m *HouseService) FindByUserId(userId uuid.UUID) []model.HouseDto {
	ret := _m.Called(userId)

	var r0 []model.HouseDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.HouseDto); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HouseDto)
		}
	}

	return r0
}

// FindHousesByGroupId provides a mock function with given fields: groupId
func (_m *HouseService) FindHousesByGroupId(groupId uuid.UUID) []model.HouseDto {
	ret := _m.Called(groupId)

	var r0 []model.HouseDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.HouseDto); ok {
		r0 = rf(groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HouseDto)
		}
	}

	return r0
}

// FindHousesByGroupIds provides a mock function with given fields: groupIds
func (_m *HouseService) FindHousesByGroupIds(groupIds []uuid.UUID) []model.HouseDto {
	ret := _m.Called(groupIds)

	var r0 []model.HouseDto
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []model.HouseDto); ok {
		r0 = rf(groupIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HouseDto)
		}
	}

	return r0
}

// Transactional provides a mock function with given fields: db
func (_m *HouseService) Transactional(db *gorm.DB) service.HouseService {
	ret := _m.Called(db)

	var r0 service.HouseService
	if rf, ok := ret.Get(0).(func(*gorm.DB) service.HouseService); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.HouseService)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, request
func (_m *HouseService) Update(id uuid.UUID, request model.UpdateHouseRequest) error {
	ret := _m.Called(id, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, model.UpdateHouseRequest) error); ok {
		r0 = rf(id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHouseService interface {
	mock.TestingT
	Cleanup(func())
}

// NewHouseService creates a new instance of HouseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHouseService(t mockConstructorTestingTNewHouseService) *HouseService {
	mock := &HouseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
