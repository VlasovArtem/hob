// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/house/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// HouseRepository is an autogenerated mock type for the HouseRepository type
type HouseRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: entity
func (_m *HouseRepository) Create(entity model.House) (model.House, error) {
	ret := _m.Called(entity)

	var r0 model.House
	if rf, ok := ret.Get(0).(func(model.House) model.House); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(model.House)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.House) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBatch provides a mock function with given fields: entities
func (_m *HouseRepository) CreateBatch(entities []model.House) ([]model.House, error) {
	ret := _m.Called(entities)

	var r0 []model.House
	if rf, ok := ret.Get(0).(func([]model.House) []model.House); ok {
		r0 = rf(entities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.House)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]model.House) error); ok {
		r1 = rf(entities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *HouseRepository) DeleteById(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsById provides a mock function with given fields: id
func (_m *HouseRepository) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *HouseRepository) FindById(id uuid.UUID) (model.House, error) {
	ret := _m.Called(id)

	var r0 model.House
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.House); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.House)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: id
func (_m *HouseRepository) FindByUserId(id uuid.UUID) []model.House {
	ret := _m.Called(id)

	var r0 []model.House
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.House); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.House)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, request
func (_m *HouseRepository) Update(id uuid.UUID, request model.UpdateHouseRequest) error {
	ret := _m.Called(id, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, model.UpdateHouseRequest) error); ok {
		r0 = rf(id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
