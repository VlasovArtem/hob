// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/provider/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProviderRepository is an autogenerated mock type for the ProviderRepository type
type ProviderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: provider
func (_m *ProviderRepository) Create(provider model.Provider) (model.Provider, error) {
	ret := _m.Called(provider)

	var r0 model.Provider
	if rf, ok := ret.Get(0).(func(model.Provider) model.Provider); ok {
		r0 = rf(provider)
	} else {
		r0 = ret.Get(0).(model.Provider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Provider) error); ok {
		r1 = rf(provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ProviderRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsById provides a mock function with given fields: id
func (_m *ProviderRepository) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExistsByNameAndUserId provides a mock function with given fields: name, userId
func (_m *ProviderRepository) ExistsByNameAndUserId(name string, userId uuid.UUID) bool {
	ret := _m.Called(name, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) bool); ok {
		r0 = rf(name, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *ProviderRepository) FindById(id uuid.UUID) (model.Provider, error) {
	ret := _m.Called(id)

	var r0 model.Provider
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.Provider); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Provider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByNameLikeAndUserId provides a mock function with given fields: namePattern, page, limit, userId
func (_m *ProviderRepository) FindByNameLikeAndUserId(namePattern string, page int, limit int, userId uuid.UUID) []model.ProviderDto {
	ret := _m.Called(namePattern, page, limit, userId)

	var r0 []model.ProviderDto
	if rf, ok := ret.Get(0).(func(string, int, int, uuid.UUID) []model.ProviderDto); ok {
		r0 = rf(namePattern, page, limit, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProviderDto)
		}
	}

	return r0
}

// FindByUserId provides a mock function with given fields: id
func (_m *ProviderRepository) FindByUserId(id uuid.UUID) []model.ProviderDto {
	ret := _m.Called(id)

	var r0 []model.ProviderDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.ProviderDto); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProviderDto)
		}
	}

	return r0
}

// Update provides a mock function with given fields: entity
func (_m *ProviderRepository) Update(entity model.Provider) error {
	ret := _m.Called(entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Provider) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
