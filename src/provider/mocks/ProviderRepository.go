// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	db "github.com/VlasovArtem/hob/src/db"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/VlasovArtem/hob/src/provider/model"

	repository "github.com/VlasovArtem/hob/src/provider/repository"

	uuid "github.com/google/uuid"
)

// ProviderRepository is an autogenerated mock type for the ProviderRepository type
type ProviderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: value, omit
func (_m *ProviderRepository) Create(value interface{}, omit ...string) error {
	_va := make([]interface{}, len(omit))
	for _i := range omit {
		_va[_i] = omit[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...string) error); ok {
		r0 = rf(value, omit...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEntity provides a mock function with given fields: provider
func (_m *ProviderRepository) CreateEntity(provider model.Provider) (model.Provider, error) {
	ret := _m.Called(provider)

	var r0 model.Provider
	if rf, ok := ret.Get(0).(func(model.Provider) model.Provider); ok {
		r0 = rf(provider)
	} else {
		r0 = ret.Get(0).(model.Provider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Provider) error); ok {
		r1 = rf(provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB provides a mock function with given fields:
func (_m *ProviderRepository) DB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// DBModeled provides a mock function with given fields: _a0
func (_m *ProviderRepository) DBModeled(_a0 interface{}) *gorm.DB {
	ret := _m.Called(_a0)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}) *gorm.DB); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ProviderRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: id
func (_m *ProviderRepository) Exists(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExistsBy provides a mock function with given fields: query, args
func (_m *ProviderRepository) ExistsBy(query interface{}, args ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) bool); ok {
		r0 = rf(query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExistsByNameAndUserId provides a mock function with given fields: name, userId
func (_m *ProviderRepository) ExistsByNameAndUserId(name string, userId uuid.UUID) bool {
	ret := _m.Called(name, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) bool); ok {
		r0 = rf(name, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *ProviderRepository) Find(id uuid.UUID) (model.Provider, error) {
	ret := _m.Called(id)

	var r0 model.Provider
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.Provider); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Provider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBy provides a mock function with given fields: query, conditions
func (_m *ProviderRepository) FindBy(query interface{}, conditions ...interface{}) (model.Provider, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, conditions...)
	ret := _m.Called(_ca...)

	var r0 model.Provider
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) model.Provider); ok {
		r0 = rf(query, conditions...)
	} else {
		r0 = ret.Get(0).(model.Provider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(query, conditions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByNameLikeAndUserId provides a mock function with given fields: namePattern, page, limit, userId
func (_m *ProviderRepository) FindByNameLikeAndUserId(namePattern string, page int, limit int, userId uuid.UUID) []model.ProviderDto {
	ret := _m.Called(namePattern, page, limit, userId)

	var r0 []model.ProviderDto
	if rf, ok := ret.Get(0).(func(string, int, int, uuid.UUID) []model.ProviderDto); ok {
		r0 = rf(namePattern, page, limit, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProviderDto)
		}
	}

	return r0
}

// FindByUserId provides a mock function with given fields: id
func (_m *ProviderRepository) FindByUserId(id uuid.UUID) []model.ProviderDto {
	ret := _m.Called(id)

	var r0 []model.ProviderDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.ProviderDto); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProviderDto)
		}
	}

	return r0
}

// FindReceiver provides a mock function with given fields: receiver, id
func (_m *ProviderRepository) FindReceiver(receiver interface{}, id uuid.UUID) error {
	ret := _m.Called(receiver, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uuid.UUID) error); ok {
		r0 = rf(receiver, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindReceiverBy provides a mock function with given fields: receiver, query, conditions
func (_m *ProviderRepository) FindReceiverBy(receiver interface{}, query interface{}, conditions ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, receiver, query)
	_ca = append(_ca, conditions...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...interface{}) error); ok {
		r0 = rf(receiver, query, conditions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// First provides a mock function with given fields: id
func (_m *ProviderRepository) First(id uuid.UUID) (model.Provider, error) {
	ret := _m.Called(id)

	var r0 model.Provider
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.Provider); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Provider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirstBy provides a mock function with given fields: query, conditions
func (_m *ProviderRepository) FirstBy(query interface{}, conditions ...interface{}) (model.Provider, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, conditions...)
	ret := _m.Called(_ca...)

	var r0 model.Provider
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) model.Provider); ok {
		r0 = rf(query, conditions...)
	} else {
		r0 = ret.Get(0).(model.Provider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(query, conditions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirstReceiver provides a mock function with given fields: receiver, id
func (_m *ProviderRepository) FirstReceiver(receiver interface{}, id uuid.UUID) error {
	ret := _m.Called(receiver, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uuid.UUID) error); ok {
		r0 = rf(receiver, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FirstReceiverBy provides a mock function with given fields: receiver, query, conditions
func (_m *ProviderRepository) FirstReceiverBy(receiver interface{}, query interface{}, conditions ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, receiver, query)
	_ca = append(_ca, conditions...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...interface{}) error); ok {
		r0 = rf(receiver, query, conditions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEntity provides a mock function with given fields:
func (_m *ProviderRepository) GetEntity() model.Provider {
	ret := _m.Called()

	var r0 model.Provider
	if rf, ok := ret.Get(0).(func() model.Provider); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.Provider)
	}

	return r0
}

// GetProvider provides a mock function with given fields:
func (_m *ProviderRepository) GetProvider() db.ProviderInterface {
	ret := _m.Called()

	var r0 db.ProviderInterface
	if rf, ok := ret.Get(0).(func() db.ProviderInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.ProviderInterface)
		}
	}

	return r0
}

// Modeled provides a mock function with given fields:
func (_m *ProviderRepository) Modeled() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Transactional provides a mock function with given fields: tx
func (_m *ProviderRepository) Transactional(tx *gorm.DB) repository.ProviderRepository {
	ret := _m.Called(tx)

	var r0 repository.ProviderRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) repository.ProviderRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ProviderRepository)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, entity, omit
func (_m *ProviderRepository) Update(id uuid.UUID, entity interface{}, omit ...string) error {
	_va := make([]interface{}, len(omit))
	for _i := range omit {
		_va[_i] = omit[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, entity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, interface{}, ...string) error); ok {
		r0 = rf(id, entity, omit...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProviderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProviderRepository creates a new instance of ProviderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProviderRepository(t mockConstructorTestingTNewProviderRepository) *ProviderRepository {
	mock := &ProviderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
