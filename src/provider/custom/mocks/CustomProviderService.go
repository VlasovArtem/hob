// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/provider/custom/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CustomProviderService is an autogenerated mock type for the CustomProviderService type
type CustomProviderService struct {
	mock.Mock
}

// Add provides a mock function with given fields: request
func (_m *CustomProviderService) Add(request model.CreateCustomProviderRequest) (model.CustomProviderDto, error) {
	ret := _m.Called(request)

	var r0 model.CustomProviderDto
	if rf, ok := ret.Get(0).(func(model.CreateCustomProviderRequest) model.CustomProviderDto); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(model.CustomProviderDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateCustomProviderRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *CustomProviderService) FindById(id uuid.UUID) (model.CustomProviderDto, error) {
	ret := _m.Called(id)

	var r0 model.CustomProviderDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.CustomProviderDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.CustomProviderDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: id
func (_m *CustomProviderService) FindByUserId(id uuid.UUID) []model.CustomProviderDto {
	ret := _m.Called(id)

	var r0 []model.CustomProviderDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.CustomProviderDto); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CustomProviderDto)
		}
	}

	return r0
}
