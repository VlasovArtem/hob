// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "provider/custom/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CustomProviderRepository is an autogenerated mock type for the CustomProviderRepository type
type CustomProviderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: provider
func (_m *CustomProviderRepository) Create(provider model.CustomProvider) (model.CustomProvider, error) {
	ret := _m.Called(provider)

	var r0 model.CustomProvider
	if rf, ok := ret.Get(0).(func(model.CustomProvider) model.CustomProvider); ok {
		r0 = rf(provider)
	} else {
		r0 = ret.Get(0).(model.CustomProvider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CustomProvider) error); ok {
		r1 = rf(provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsById provides a mock function with given fields: id
func (_m *CustomProviderRepository) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExistsByNameAndUserId provides a mock function with given fields: name, userId
func (_m *CustomProviderRepository) ExistsByNameAndUserId(name string, userId uuid.UUID) bool {
	ret := _m.Called(name, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) bool); ok {
		r0 = rf(name, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *CustomProviderRepository) FindById(id uuid.UUID) (model.CustomProvider, error) {
	ret := _m.Called(id)

	var r0 model.CustomProvider
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.CustomProvider); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.CustomProvider)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: id
func (_m *CustomProviderRepository) FindByUserId(id uuid.UUID) []model.CustomProvider {
	ret := _m.Called(id)

	var r0 []model.CustomProvider
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.CustomProvider); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CustomProvider)
		}
	}

	return r0
}
