// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/group/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// GroupService is an autogenerated mock type for the GroupService type
type GroupService struct {
	mock.Mock
}

// Add provides a mock function with given fields: house
func (_m *GroupService) Add(house model.CreateGroupRequest) (model.GroupDto, error) {
	ret := _m.Called(house)

	var r0 model.GroupDto
	if rf, ok := ret.Get(0).(func(model.CreateGroupRequest) model.GroupDto); ok {
		r0 = rf(house)
	} else {
		r0 = ret.Get(0).(model.GroupDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateGroupRequest) error); ok {
		r1 = rf(house)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *GroupService) DeleteById(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsById provides a mock function with given fields: id
func (_m *GroupService) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *GroupService) FindById(id uuid.UUID) (model.GroupDto, error) {
	ret := _m.Called(id)

	var r0 model.GroupDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.GroupDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.GroupDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: userId
func (_m *GroupService) FindByUserId(userId uuid.UUID) []model.GroupDto {
	ret := _m.Called(userId)

	var r0 []model.GroupDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.GroupDto); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GroupDto)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, request
func (_m *GroupService) Update(id uuid.UUID, request model.UpdateGroupRequest) error {
	ret := _m.Called(id, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, model.UpdateGroupRequest) error); ok {
		r0 = rf(id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
