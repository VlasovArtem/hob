// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// DatabaseService is an autogenerated mock type for the DatabaseService type
type DatabaseService struct {
	mock.Mock
}

// Create provides a mock function with given fields: value
func (_m *DatabaseService) Create(value any) error {
	ret := _m.Called(value)

	var r0 error
	if rf, ok := ret.Get(0).(func(any) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// D provides a mock function with given fields:
func (_m *DatabaseService) D() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// DM provides a mock function with given fields: model
func (_m *DatabaseService) DM(model any) *gorm.DB {
	ret := _m.Called(model)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(any) *gorm.DB); ok {
		r0 = rf(model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// DeleteById provides a mock function with given fields: model, id
func (_m *DatabaseService) DeleteById(model any, id uuid.UUID) error {
	ret := _m.Called(model, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(any, uuid.UUID) error); ok {
		r0 = rf(model, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsById provides a mock function with given fields: model, id
func (_m *DatabaseService) ExistsById(model any, id uuid.UUID) bool {
	ret := _m.Called(model, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(any, uuid.UUID) bool); ok {
		r0 = rf(model, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExistsByQuery provides a mock function with given fields: model, query, args
func (_m *DatabaseService) ExistsByQuery(model any, query any, args ...any) bool {
	var _ca []any
	_ca = append(_ca, model, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(any, any, ...any) bool); ok {
		r0 = rf(model, query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindById provides a mock function with given fields: receiver, id
func (_m *DatabaseService) FindById(receiver any, id uuid.UUID) error {
	ret := _m.Called(receiver, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(any, uuid.UUID) error); ok {
		r0 = rf(receiver, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIdModeled provides a mock function with given fields: model, receiver, id
func (_m *DatabaseService) FindByIdModeled(model any, receiver any, id uuid.UUID) error {
	ret := _m.Called(model, receiver, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(any, any, uuid.UUID) error); ok {
		r0 = rf(model, receiver, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByModeled provides a mock function with given fields: model, receiver, query, conditions
func (_m *DatabaseService) FindByModeled(model any, receiver any, query any, conditions ...any) error {
	var _ca []any
	_ca = append(_ca, model, receiver, query)
	_ca = append(_ca, conditions...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(any, any, any, ...any) error); ok {
		r0 = rf(model, receiver, query, conditions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByQuery provides a mock function with given fields: receiver, query, conditions
func (_m *DatabaseService) FindByQuery(receiver any, query any, conditions ...any) error {
	var _ca []any
	_ca = append(_ca, receiver, query)
	_ca = append(_ca, conditions...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(any, any, ...any) error); ok {
		r0 = rf(receiver, query, conditions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateById provides a mock function with given fields: model, id, entity, omit
func (_m *DatabaseService) UpdateById(model any, id uuid.UUID, entity any, omit ...string) error {
	_va := make([]any, len(omit))
	for _i := range omit {
		_va[_i] = omit[_i]
	}
	var _ca []any
	_ca = append(_ca, model, id, entity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(any, uuid.UUID, any, ...string) error); ok {
		r0 = rf(model, id, entity, omit...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
