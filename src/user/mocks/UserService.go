// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/user/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Add provides a mock function with given fields: request
func (_m *UserService) Add(request model.CreateUserRequest) (model.UserDto, error) {
	ret := _m.Called(request)

	var r0 model.UserDto
	if rf, ok := ret.Get(0).(func(model.CreateUserRequest) model.UserDto); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(model.UserDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateUserRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *UserService) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsById provides a mock function with given fields: id
func (_m *UserService) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *UserService) FindById(id uuid.UUID) (model.UserDto, error) {
	ret := _m.Called(id)

	var r0 model.UserDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.UserDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.UserDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, request
func (_m *UserService) Update(id uuid.UUID, request model.UpdateUserRequest) error {
	ret := _m.Called(id, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, model.UpdateUserRequest) error); ok {
		r0 = rf(id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyUser provides a mock function with given fields: email, password
func (_m *UserService) VerifyUser(email string, password string) (model.UserDto, error) {
	ret := _m.Called(email, password)

	var r0 model.UserDto
	if rf, ok := ret.Get(0).(func(string, string) model.UserDto); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(model.UserDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
