// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	dependency "github.com/VlasovArtem/hob/src/common/dependency"
	mock "github.com/stretchr/testify/mock"

	reflect "reflect"
)

// DependenciesProvider is an autogenerated mock type for the DependenciesProvider type
type DependenciesProvider struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *DependenciesProvider) Add(_a0 any) any {
	ret := _m.Called(_a0)

	var r0 any
	if rf, ok := ret.Get(0).(func(any) any); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// AddAutoDependency provides a mock function with given fields: initializer
func (_m *DependenciesProvider) AddAutoDependency(initializer dependency.ObjectDependencyInitializer) dependency.ObjectDependencyInitializer {
	ret := _m.Called(initializer)

	var r0 dependency.ObjectDependencyInitializer
	if rf, ok := ret.Get(0).(func(dependency.ObjectDependencyInitializer) dependency.ObjectDependencyInitializer); ok {
		r0 = rf(initializer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dependency.ObjectDependencyInitializer)
		}
	}

	return r0
}

// FindByName provides a mock function with given fields: dependencyName, required
func (_m *DependenciesProvider) FindByName(dependencyName string, required bool) any {
	ret := _m.Called(dependencyName, required)

	var r0 any
	if rf, ok := ret.Get(0).(func(string, bool) any); ok {
		r0 = rf(dependencyName, required)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// FindByObject provides a mock function with given fields: object
func (_m *DependenciesProvider) FindByObject(object any) any {
	ret := _m.Called(object)

	var r0 any
	if rf, ok := ret.Get(0).(func(any) any); ok {
		r0 = rf(object)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// FindByType provides a mock function with given fields: typeOf, required
func (_m *DependenciesProvider) FindByType(typeOf reflect.Type, required bool) any {
	ret := _m.Called(typeOf, required)

	var r0 any
	if rf, ok := ret.Get(0).(func(reflect.Type, bool) any); ok {
		r0 = rf(typeOf, required)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// FindRequired provides a mock function with given fields: dependencyName
func (_m *DependenciesProvider) FindRequired(dependencyName string) any {
	ret := _m.Called(dependencyName)

	var r0 any
	if rf, ok := ret.Get(0).(func(string) any); ok {
		r0 = rf(dependencyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// FindRequiredByObject provides a mock function with given fields: object
func (_m *DependenciesProvider) FindRequiredByObject(object any) any {
	ret := _m.Called(object)

	var r0 any
	if rf, ok := ret.Get(0).(func(any) any); ok {
		r0 = rf(object)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// FindRequiredByType provides a mock function with given fields: typeOf
func (_m *DependenciesProvider) FindRequiredByType(typeOf reflect.Type) any {
	ret := _m.Called(typeOf)

	var r0 any
	if rf, ok := ret.Get(0).(func(reflect.Type) any); ok {
		r0 = rf(typeOf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}
