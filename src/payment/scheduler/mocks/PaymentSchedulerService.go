// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/payment/scheduler/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	service "github.com/VlasovArtem/hob/src/payment/scheduler/service"

	uuid "github.com/google/uuid"
)

// PaymentSchedulerService is an autogenerated mock type for the PaymentSchedulerService type
type PaymentSchedulerService struct {
	mock.Mock
}

// Add provides a mock function with given fields: request
func (_m *PaymentSchedulerService) Add(request model.CreatePaymentSchedulerRequest) (model.PaymentSchedulerDto, error) {
	ret := _m.Called(request)

	var r0 model.PaymentSchedulerDto
	if rf, ok := ret.Get(0).(func(model.CreatePaymentSchedulerRequest) model.PaymentSchedulerDto); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(model.PaymentSchedulerDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreatePaymentSchedulerRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByHouseId provides a mock function with given fields: houseId
func (_m *PaymentSchedulerService) FindByHouseId(houseId uuid.UUID) []model.PaymentSchedulerDto {
	ret := _m.Called(houseId)

	var r0 []model.PaymentSchedulerDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.PaymentSchedulerDto); ok {
		r0 = rf(houseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentSchedulerDto)
		}
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *PaymentSchedulerService) FindById(id uuid.UUID) (model.PaymentSchedulerDto, error) {
	ret := _m.Called(id)

	var r0 model.PaymentSchedulerDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.PaymentSchedulerDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.PaymentSchedulerDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProviderId provides a mock function with given fields: providerId
func (_m *PaymentSchedulerService) FindByProviderId(providerId uuid.UUID) []model.PaymentSchedulerDto {
	ret := _m.Called(providerId)

	var r0 []model.PaymentSchedulerDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.PaymentSchedulerDto); ok {
		r0 = rf(providerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentSchedulerDto)
		}
	}

	return r0
}

// FindByUserId provides a mock function with given fields: userId
func (_m *PaymentSchedulerService) FindByUserId(userId uuid.UUID) []model.PaymentSchedulerDto {
	ret := _m.Called(userId)

	var r0 []model.PaymentSchedulerDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.PaymentSchedulerDto); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentSchedulerDto)
		}
	}

	return r0
}

// Remove provides a mock function with given fields: id
func (_m *PaymentSchedulerService) Remove(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactional provides a mock function with given fields: tx
func (_m *PaymentSchedulerService) Transactional(tx *gorm.DB) service.PaymentSchedulerService {
	ret := _m.Called(tx)

	var r0 service.PaymentSchedulerService
	if rf, ok := ret.Get(0).(func(*gorm.DB) service.PaymentSchedulerService); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.PaymentSchedulerService)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, request
func (_m *PaymentSchedulerService) Update(id uuid.UUID, request model.UpdatePaymentSchedulerRequest) error {
	ret := _m.Called(id, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, model.UpdatePaymentSchedulerRequest) error); ok {
		r0 = rf(id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPaymentSchedulerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentSchedulerService creates a new instance of PaymentSchedulerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentSchedulerService(t mockConstructorTestingTNewPaymentSchedulerService) *PaymentSchedulerService {
	mock := &PaymentSchedulerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
