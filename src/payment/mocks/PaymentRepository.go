// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/payment/model"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// PaymentRepository is an autogenerated mock type for the PaymentRepository type
type PaymentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: entity
func (_m *PaymentRepository) Create(entity model.Payment) (model.Payment, error) {
	ret := _m.Called(entity)

	var r0 model.Payment
	if rf, ok := ret.Get(0).(func(model.Payment) model.Payment); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(model.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Payment) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBatch provides a mock function with given fields: entities
func (_m *PaymentRepository) CreateBatch(entities []model.Payment) ([]model.Payment, error) {
	ret := _m.Called(entities)

	var r0 []model.Payment
	if rf, ok := ret.Get(0).(func([]model.Payment) []model.Payment); ok {
		r0 = rf(entities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]model.Payment) error); ok {
		r1 = rf(entities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *PaymentRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: id
func (_m *PaymentRepository) DeleteById(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsById provides a mock function with given fields: id
func (_m *PaymentRepository) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindByHouseId provides a mock function with given fields: houseId, limit, offset, from, to
func (_m *PaymentRepository) FindByHouseId(houseId uuid.UUID, limit int, offset int, from *time.Time, to *time.Time) []model.PaymentDto {
	ret := _m.Called(houseId, limit, offset, from, to)

	var r0 []model.PaymentDto
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int, *time.Time, *time.Time) []model.PaymentDto); ok {
		r0 = rf(houseId, limit, offset, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentDto)
		}
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *PaymentRepository) FindById(id uuid.UUID) (model.Payment, error) {
	ret := _m.Called(id)

	var r0 model.Payment
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.Payment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProviderId provides a mock function with given fields: providerId, limit, offset, from, to
func (_m *PaymentRepository) FindByProviderId(providerId uuid.UUID, limit int, offset int, from *time.Time, to *time.Time) []model.PaymentDto {
	ret := _m.Called(providerId, limit, offset, from, to)

	var r0 []model.PaymentDto
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int, *time.Time, *time.Time) []model.PaymentDto); ok {
		r0 = rf(providerId, limit, offset, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentDto)
		}
	}

	return r0
}

// FindByUserId provides a mock function with given fields: userId, limit, offset, from, to
func (_m *PaymentRepository) FindByUserId(userId uuid.UUID, limit int, offset int, from *time.Time, to *time.Time) []model.PaymentDto {
	ret := _m.Called(userId, limit, offset, from, to)

	var r0 []model.PaymentDto
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int, *time.Time, *time.Time) []model.PaymentDto); ok {
		r0 = rf(userId, limit, offset, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentDto)
		}
	}

	return r0
}

// Update provides a mock function with given fields: entity
func (_m *PaymentRepository) Update(entity model.Payment) error {
	ret := _m.Called(entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Payment) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
