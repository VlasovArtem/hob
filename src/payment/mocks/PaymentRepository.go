// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/payment/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PaymentRepository is an autogenerated mock type for the PaymentRepository type
type PaymentRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: entity
func (_m *PaymentRepository) Create(entity model.Payment) (model.Payment, error) {
	ret := _m.Called(entity)

	var r0 model.Payment
	if rf, ok := ret.Get(0).(func(model.Payment) model.Payment); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(model.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Payment) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsById provides a mock function with given fields: id
func (_m *PaymentRepository) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindByHouseId provides a mock function with given fields: HouseId
func (_m *PaymentRepository) FindByHouseId(houseId uuid.UUID) []model.Payment {
	ret := _m.Called(houseId)

	var r0 []model.Payment
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.Payment); ok {
		r0 = rf(houseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Payment)
		}
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *PaymentRepository) FindById(id uuid.UUID) (model.Payment, error) {
	ret := _m.Called(id)

	var r0 model.Payment
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.Payment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: UserId
func (_m *PaymentRepository) FindByUserId(userId uuid.UUID) []model.Payment {
	ret := _m.Called(userId)

	var r0 []model.Payment
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.Payment); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Payment)
		}
	}

	return r0
}
