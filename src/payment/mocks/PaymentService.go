// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/payment/model"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

// Add provides a mock function with given fields: request
func (_m *PaymentService) Add(request model.CreatePaymentRequest) (model.PaymentDto, error) {
	ret := _m.Called(request)

	var r0 model.PaymentDto
	if rf, ok := ret.Get(0).(func(model.CreatePaymentRequest) model.PaymentDto); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(model.PaymentDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreatePaymentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddBatch provides a mock function with given fields: request
func (_m *PaymentService) AddBatch(request model.CreatePaymentBatchRequest) ([]model.PaymentDto, error) {
	ret := _m.Called(request)

	var r0 []model.PaymentDto
	if rf, ok := ret.Get(0).(func(model.CreatePaymentBatchRequest) []model.PaymentDto); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreatePaymentBatchRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *PaymentService) DeleteById(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsById provides a mock function with given fields: id
func (_m *PaymentService) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindByHouseId provides a mock function with given fields: id, limit, offset, from, to
func (_m *PaymentService) FindByHouseId(id uuid.UUID, limit int, offset int, from *time.Time, to *time.Time) []model.PaymentDto {
	ret := _m.Called(id, limit, offset, from, to)

	var r0 []model.PaymentDto
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int, *time.Time, *time.Time) []model.PaymentDto); ok {
		r0 = rf(id, limit, offset, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentDto)
		}
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *PaymentService) FindById(id uuid.UUID) (model.PaymentDto, error) {
	ret := _m.Called(id)

	var r0 model.PaymentDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.PaymentDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.PaymentDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProviderId provides a mock function with given fields: id, limit, offset, from, to
func (_m *PaymentService) FindByProviderId(id uuid.UUID, limit int, offset int, from *time.Time, to *time.Time) []model.PaymentDto {
	ret := _m.Called(id, limit, offset, from, to)

	var r0 []model.PaymentDto
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int, *time.Time, *time.Time) []model.PaymentDto); ok {
		r0 = rf(id, limit, offset, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentDto)
		}
	}

	return r0
}

// FindByUserId provides a mock function with given fields: id, limit, offset, from, to
func (_m *PaymentService) FindByUserId(id uuid.UUID, limit int, offset int, from *time.Time, to *time.Time) []model.PaymentDto {
	ret := _m.Called(id, limit, offset, from, to)

	var r0 []model.PaymentDto
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int, *time.Time, *time.Time) []model.PaymentDto); ok {
		r0 = rf(id, limit, offset, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentDto)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, request
func (_m *PaymentService) Update(id uuid.UUID, request model.UpdatePaymentRequest) error {
	ret := _m.Called(id, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, model.UpdatePaymentRequest) error); ok {
		r0 = rf(id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
