// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "meter/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MeterRepository is an autogenerated mock type for the MeterRepository type
type MeterRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: entity
func (_m *MeterRepository) Create(entity model.Meter) (model.Meter, error) {
	ret := _m.Called(entity)

	var r0 model.Meter
	if rf, ok := ret.Get(0).(func(model.Meter) model.Meter); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(model.Meter)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Meter) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsById provides a mock function with given fields: id
func (_m *MeterRepository) ExistsById(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindByHouseId provides a mock function with given fields: houseId
func (_m *MeterRepository) FindByHouseId(houseId uuid.UUID) []model.Meter {
	ret := _m.Called(houseId)

	var r0 []model.Meter
	if rf, ok := ret.Get(0).(func(uuid.UUID) []model.Meter); ok {
		r0 = rf(houseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Meter)
		}
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *MeterRepository) FindById(id uuid.UUID) (model.Meter, error) {
	ret := _m.Called(id)

	var r0 model.Meter
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.Meter); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Meter)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPaymentId provides a mock function with given fields: paymentId
func (_m *MeterRepository) FindByPaymentId(paymentId uuid.UUID) (model.Meter, error) {
	ret := _m.Called(paymentId)

	var r0 model.Meter
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.Meter); ok {
		r0 = rf(paymentId)
	} else {
		r0 = ret.Get(0).(model.Meter)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
