// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/meter/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	service "github.com/VlasovArtem/hob/src/meter/service"

	uuid "github.com/google/uuid"
)

// MeterService is an autogenerated mock type for the MeterService type
type MeterService struct {
	mock.Mock
}

// Add provides a mock function with given fields: request
func (_m *MeterService) Add(request model.CreateMeterRequest) (model.MeterDto, error) {
	ret := _m.Called(request)

	var r0 model.MeterDto
	if rf, ok := ret.Get(0).(func(model.CreateMeterRequest) model.MeterDto); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(model.MeterDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateMeterRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *MeterService) DeleteById(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *MeterService) FindById(id uuid.UUID) (model.MeterDto, error) {
	ret := _m.Called(id)

	var r0 model.MeterDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.MeterDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.MeterDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPaymentId provides a mock function with given fields: id
func (_m *MeterService) FindByPaymentId(id uuid.UUID) (model.MeterDto, error) {
	ret := _m.Called(id)

	var r0 model.MeterDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.MeterDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.MeterDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transactional provides a mock function with given fields: tx
func (_m *MeterService) Transactional(tx *gorm.DB) service.MeterService {
	ret := _m.Called(tx)

	var r0 service.MeterService
	if rf, ok := ret.Get(0).(func(*gorm.DB) service.MeterService); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.MeterService)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, request
func (_m *MeterService) Update(id uuid.UUID, request model.UpdateMeterRequest) error {
	ret := _m.Called(id, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, model.UpdateMeterRequest) error); ok {
		r0 = rf(id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMeterService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMeterService creates a new instance of MeterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMeterService(t mockConstructorTestingTNewMeterService) *MeterService {
	mock := &MeterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
