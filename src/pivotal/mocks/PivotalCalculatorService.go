// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	calculator "github.com/VlasovArtem/hob/src/pivotal/calculator"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/VlasovArtem/hob/src/pivotal/model"

	uuid "github.com/google/uuid"
)

// PivotalCalculatorService is an autogenerated mock type for the PivotalCalculatorService type
type PivotalCalculatorService struct {
	mock.Mock
}

// Calculate provides a mock function with given fields: houseId
func (_m *PivotalCalculatorService) Calculate(houseId uuid.UUID) (model.PivotalResponseDto, error) {
	ret := _m.Called(houseId)

	var r0 model.PivotalResponseDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.PivotalResponseDto); ok {
		r0 = rf(houseId)
	} else {
		r0 = ret.Get(0).(model.PivotalResponseDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(houseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transactional provides a mock function with given fields: tx
func (_m *PivotalCalculatorService) Transactional(tx *gorm.DB) calculator.PivotalCalculatorService {
	ret := _m.Called(tx)

	var r0 calculator.PivotalCalculatorService
	if rf, ok := ret.Get(0).(func(*gorm.DB) calculator.PivotalCalculatorService); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(calculator.PivotalCalculatorService)
		}
	}

	return r0
}

type mockConstructorTestingTNewPivotalCalculatorService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPivotalCalculatorService creates a new instance of PivotalCalculatorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPivotalCalculatorService(t mockConstructorTestingTNewPivotalCalculatorService) *PivotalCalculatorService {
	mock := &PivotalCalculatorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
