// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/pivotal/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	service "github.com/VlasovArtem/hob/src/pivotal/service"

	time "time"

	uuid "github.com/google/uuid"
)

// PivotalService is an autogenerated mock type for the PivotalService type
type PivotalService struct {
	mock.Mock
}

// AddIncome provides a mock function with given fields: incomeSum, updateTime, houseId, groupIds
func (_m *PivotalService) AddIncome(incomeSum float64, updateTime time.Time, houseId *uuid.UUID, groupIds []uuid.UUID) error {
	ret := _m.Called(incomeSum, updateTime, houseId, groupIds)

	var r0 error
	if rf, ok := ret.Get(0).(func(float64, time.Time, *uuid.UUID, []uuid.UUID) error); ok {
		r0 = rf(incomeSum, updateTime, houseId, groupIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPayment provides a mock function with given fields: paymentSum, updateTime, houseId
func (_m *PivotalService) AddPayment(paymentSum float64, updateTime time.Time, houseId uuid.UUID) error {
	ret := _m.Called(paymentSum, updateTime, houseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(float64, time.Time, uuid.UUID) error); ok {
		r0 = rf(paymentSum, updateTime, houseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsByHouseId provides a mock function with given fields: houseId
func (_m *PivotalService) ExistsByHouseId(houseId uuid.UUID) bool {
	ret := _m.Called(houseId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(houseId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Find provides a mock function with given fields: houseId
func (_m *PivotalService) Find(houseId uuid.UUID) (model.PivotalResponseDto, error) {
	ret := _m.Called(houseId)

	var r0 model.PivotalResponseDto
	if rf, ok := ret.Get(0).(func(uuid.UUID) model.PivotalResponseDto); ok {
		r0 = rf(houseId)
	} else {
		r0 = ret.Get(0).(model.PivotalResponseDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(houseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transactional provides a mock function with given fields: tx
func (_m *PivotalService) Transactional(tx *gorm.DB) service.PivotalService {
	ret := _m.Called(tx)

	var r0 service.PivotalService
	if rf, ok := ret.Get(0).(func(*gorm.DB) service.PivotalService); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.PivotalService)
		}
	}

	return r0
}

type mockConstructorTestingTNewPivotalService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPivotalService creates a new instance of PivotalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPivotalService(t mockConstructorTestingTNewPivotalService) *PivotalService {
	mock := &PivotalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
