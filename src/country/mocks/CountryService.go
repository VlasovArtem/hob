// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	model "github.com/VlasovArtem/hob/src/country/model"
	mock "github.com/stretchr/testify/mock"
)

// CountryService is an autogenerated mock type for the CountryService type
type CountryService struct {
	mock.Mock
}

// FindAllCountries provides a mock function with given fields:
func (_m *CountryService) FindAllCountries() []model.Country {
	ret := _m.Called()

	var r0 []model.Country
	if rf, ok := ret.Get(0).(func() []model.Country); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Country)
		}
	}

	return r0
}

// FindCountryByCode provides a mock function with given fields: code
func (_m *CountryService) FindCountryByCode(code string) (model.Country, error) {
	ret := _m.Called(code)

	var r0 model.Country
	if rf, ok := ret.Get(0).(func(string) model.Country); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(model.Country)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCountryService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCountryService creates a new instance of CountryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCountryService(t mockConstructorTestingTNewCountryService) *CountryService {
	mock := &CountryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
